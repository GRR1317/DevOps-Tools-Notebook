
03-07-2023 DAY-01: INTRO, SETUP, INVENTORY & ADHOC
ANSIBLE:
It's an automation configuration and management tool.

configuration: hardware & software pros
Management: update, install, uninstall ---

code: yaml language (Yet another markup Language)
year: 2012 -- > miache1 dehann -- > dependency: python 

INFRA: Resources used to run our application on the cloud.
ex: servers, vpc, asg, elb -----

SETUP:
ALL SERVERS: to communicate with all servers
hostnamectl set-hostname
sudo -i
passwd root
vim /etc/ssh/sshd_config
38: PermitRootLogin yes  # uncomment
63: PasswordAuthentication yes

systemctl restart sshd
systemctl status sshd
==============================================================
ANSIBLE SERVER:

amazon-linux-extras install ansible2 -y
yum install python python-pip python-level -y
vim /etc/ansible/hosts

[dev]
172.31.86.81
172.31.82.63

[test]
172.31.95.156
172.31.83.100

vim /etc/ansible/ansible.cfg (uncomment 14 & 22)

=========================================================
SSH CONNECTIONS: ANSIBLE SERVER

ssh-keygen  --- > 4 ENTERS

ssh-copy-id root@172.31.82.63 --- > yes --- > password
ssh 172.31.82.63
ctrl + d (logout)

Note: If you do not log out and try to connect to the new server it won't connect

Connect all the servers in this way

cd .ssh --- > cat known_hosts

====================================================================================================

INVENTORY HOST PATTERN:

ansible all --list-hosts          # shows all the servers
ansible all[1] --list-hosts       # shows the 2nd server of all 
ansible dev --list-hosts          # shows the dev server only
ansible test --list-hosts         # shows the test server only
ansible test[1] --list-hosts      # shows the test 2nd server only
ansible all[1:3] --list-hosts     # shows server 2 to server 4
ansible all[-1] --list-hosts      # shows the last server
ansible all[-3] --list-hosts      # shows the last 3rd server

====================================================================================================

WORKING WITH ANSIBLE:

1. ADHOC: SIMPLE LINUX COMMANDS USED FOR ONLY ONCE WORKS

ansible all -a "ls"
ansible: command line tool
all  : servers 
-a : arguments 
ls : linux commands


ansible all -a "touch file1"
ansible all -a "yum install git -y"
ansible all -a "yum install httpd -y"
ansible all -a "systemctl start httpd -y"
ansible all -a "systemctl start httpd"
ansible all -a "systemctl status httpd"
ansible all -a "useradd raham"
ansible all -a "cat /etc/passwd"

====================================================================================================

04-07-2023 DAY-02: MODULES, PLAYBOOKS

2. MODULES: it is in the key-value format.
ex: Name: raham 
    Loc: Hyderabad
it is reusable.


ADHOC:  ansible all -a "yum install git -y"
MODULE: ansible all -m yum -a "pkg=git state=present"   

ansible all -m yum -a "pkg=git state=present" 
ansible all -m yum -a "pkg=tree state=present" 		#(present=install)
ansible all -m yum -a "pkg=tree state=latest"  		#(latest=update)
ansible all -m yum -a "pkg=tree state=absent"  		#(absent=uninstall)
ansible all -m yum -a "name=httpd state=present"
ansible all -m service -a "name=httpd state=restarted"  #(restarted=restart)
ansible all -m service -a "name=httpd state=stopped"    #(stopped=stop)
ansible all -m user -a "name=vijayk state=present"

Limitation:
1. we cannot reuse the modules.
2. we cannot execute multiple modules.

PLAYBOOK:
It's a collection of modules.
here we can use multiple modules & we can reuse it.
playbook is written on yaml language.
it works on key-value and its extension (yaml/yml)


ansible all -m yum -a "name=git state=present"   

- hosts: all
  tasks:
    - name: Installing git
      yum: name=git state=present


- hosts: all
  tasks:
    - name: installing git
      yum: name=git state=absent


MULTITASKS:

- hosts: all
  tasks:
    - name: installing httpd
      yum: name=httpd state=present

    - name: restarting httpd
      service: name=httpd state=restarted

    - name: create a user
      user: name=rajini state=present

HISTORY:
 100  ansible dev --list-hosts
  101  ansible test --list-hosts
  102  ansible test -a "yum install git -y"
  103  ansible test -a "yum install tree -y"
  104  ansible all -a "yum remove git* httpd* tree* -y"
  105  ansible all -m yum -a "pkg=git state=present"
  106  ansible all -a "git -v"
  107  ansible all -m yum -a "pkg=tree state=present"
  108  ansible all -a "tree --version"
  109  ansible all -m yum -a "pkg=tree state=latest"
  110  ansible all -m yum -a "pkg=tree state=present"
  111  ansible all -m yum -a "pkg=tree state=latest"
  112  ansible all -m yum -a "pkg=tree state=absent"
  113  ansible all -m yum -a "name=httpd state=present"
  114  ansible all -m yum -a "name=httpd state=restarted"
  115  ansible all -m service -a "name=httpd state=restarted"
  116  ansible all -m service -a "name=httpd state=stopped"
  117  ansible all -m service -a "name=httpd state=restarted"
  118  ansible all -m user -a "name=vijayk state=present"
  119  ansible all -a "getent passwd"
  120  vim raham.yml
  121  ansible-playbook raham.yml
  122  ansible all -a "yum remove git* httpd* tree* -y"
  123  ansible-playbook raham.yml
  124  cat raham.yml
  125  vim raham.yml
  126  ansible-playbook raham.yml
  127  vim raham.yml
  128  ansible-playbook raham.yml
  129  cat raham.yml
  130  vim raham.yml
  131  ansible-playbook raham.yml
  132  cat raham.yml
  133  history
