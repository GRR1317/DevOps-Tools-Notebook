
03-07-2023 DAY-01: INTRO, SETUP, INVENTORY & ADHOC
ANSIBLE:
It's an automation configuration and management tool.

configuration: hardware & software pros
Management: update, install, uninstall ---

code: yaml language (Yet another markup Language)
year: 2012 -- > miache1 dehann -- > dependency: python 

INFRA: Resources used to run our application on the cloud.
ex: servers, vpc, asg, elb -----

SETUP:
ALL SERVERS: to communicate with all servers
hostnamectl set-hostname
sudo -i
passwd root
vim /etc/ssh/sshd_config
38: PermitRootLogin yes  # uncomment
63: PasswordAuthentication yes

systemctl restart sshd
systemctl status sshd
==============================================================
ANSIBLE SERVER:

amazon-linux-extras install ansible2 -y
yum install python python-pip python-level -y
vim /etc/ansible/hosts

[dev]
172.31.86.81
172.31.82.63

[test]
172.31.95.156
172.31.83.100

vim /etc/ansible/ansible.cfg (uncomment 14 & 22)

=========================================================
SSH CONNECTIONS: ANSIBLE SERVER

ssh-keygen  --- > 4 ENTERS

ssh-copy-id root@172.31.82.63 --- > yes --- > password
ssh 172.31.82.63
ctrl + d (logout)

Note: If you do not log out and try to connect to the new server it won't connect

Connect all the servers in this way

cd .ssh --- > cat known_hosts

====================================================================================================

INVENTORY HOST PATTERN:

ansible all --list-hosts          # shows all the servers
ansible all[1] --list-hosts       # shows the 2nd server of all 
ansible dev --list-hosts          # shows the dev server only
ansible test --list-hosts         # shows the test server only
ansible test[1] --list-hosts      # shows the test 2nd server only
ansible all[1:3] --list-hosts     # shows server 2 to server 4
ansible all[-1] --list-hosts      # shows the last server
ansible all[-3] --list-hosts      # shows the last 3rd server

====================================================================================================

WORKING WITH ANSIBLE:

1. ADHOC: SIMPLE LINUX COMMANDS USED FOR ONLY ONCE WORKS

ansible all -a "ls"
ansible: command line tool
all  : servers 
-a : arguments 
ls : linux commands


ansible all -a "touch file1"
ansible all -a "yum install git -y"
ansible all -a "yum install httpd -y"
ansible all -a "systemctl start httpd -y"
ansible all -a "systemctl start httpd"
ansible all -a "systemctl status httpd"
ansible all -a "useradd raham"
ansible all -a "cat /etc/passwd"

====================================================================================================

04-07-2023 DAY-02: MODULES, PLAYBOOKS

2. MODULES: it is in the key-value format.
ex: Name: raham 
    Loc: Hyderabad
it is reusable.


ADHOC:  ansible all -a "yum install git -y"
MODULE: ansible all -m yum -a "pkg=git state=present"   

ansible all -m yum -a "pkg=git state=present" 
ansible all -m yum -a "pkg=tree state=present" 		#(present=install)
ansible all -m yum -a "pkg=tree state=latest"  		#(latest=update)
ansible all -m yum -a "pkg=tree state=absent"  		#(absent=uninstall)
ansible all -m yum -a "name=httpd state=present"
ansible all -m service -a "name=httpd state=restarted"  #(restarted=restart)
ansible all -m service -a "name=httpd state=stopped"    #(stopped=stop)
ansible all -m user -a "name=vijayk state=present"

Limitation:
1. we cannot reuse the modules.
2. we cannot execute multiple modules.

PLAYBOOK:
It's a collection of modules.
here we can use multiple modules & we can reuse it.
playbook is written on yaml language.
it works on key-value and its extension (yaml/yml)


ansible all -m yum -a "name=git state=present"   

- hosts: all
  tasks:
    - name: Installing git
      yum: name=git state=present


- hosts: all
  tasks:
    - name: installing git
      yum: name=git state=absent


MULTITASKS:

- hosts: all
  tasks:
    - name: installing httpd
      yum: name=httpd state=present

    - name: restarting httpd
      service: name=httpd state=restarted

    - name: create a user
      user: name=rajini state=present

HISTORY:
 100  ansible dev --list-hosts
  101  ansible test --list-hosts
  102  ansible test -a "yum install git -y"
  103  ansible test -a "yum install tree -y"
  104  ansible all -a "yum remove git* httpd* tree* -y"
  105  ansible all -m yum -a "pkg=git state=present"
  106  ansible all -a "git -v"
  107  ansible all -m yum -a "pkg=tree state=present"
  108  ansible all -a "tree --version"
  109  ansible all -m yum -a "pkg=tree state=latest"
  110  ansible all -m yum -a "pkg=tree state=present"
  111  ansible all -m yum -a "pkg=tree state=latest"
  112  ansible all -m yum -a "pkg=tree state=absent"
  113  ansible all -m yum -a "name=httpd state=present"
  114  ansible all -m yum -a "name=httpd state=restarted"
  115  ansible all -m service -a "name=httpd state=restarted"
  116  ansible all -m service -a "name=httpd state=stopped"
  117  ansible all -m service -a "name=httpd state=restarted"
  118  ansible all -m user -a "name=vijayk state=present"
  119  ansible all -a "getent passwd"
  120  vim raham.yml
  121  ansible-playbook raham.yml
  122  ansible all -a "yum remove git* httpd* tree* -y"
  123  ansible-playbook raham.yml
  124  cat raham.yml
  125  vim raham.yml
  126  ansible-playbook raham.yml
  127  vim raham.yml
  128  ansible-playbook raham.yml
  129  cat raham.yml
  130  vim raham.yml
  131  ansible-playbook raham.yml
  132  cat raham.yml
  133  history
========================================
05-07-2023: day-03 -- > RAW, COMMAND, SHELL, TAGS VARIABLES & GATHERFACTS

SHELL VS COMMAND VS RAW:

- hosts: all
  tasks:
    - name: task-1
      yum: name=git state=present

    - name: task-2
      shell: yum install httpd -y

    - name: task-3
      command: yum install tree -y

    - name: task-4
      raw: yum install java-1.8.0-openjdk -y

- hosts: all
  tasks:
    - name: task-1
      yum: name=git state=absent

    - name: task-2
      command: yum remove httpd* -y

    - name: task-3
      command: yum remove tree* -y

    - name: task-4
      command: yum remove java-1.8.0-openjdk* -y

TAGS: it will execute/skip the particular task among multiple tasks.

- hosts: all
  tasks:
    - name: task-1
      yum: name=git state=present
      tags: a

    - name: task-2
      shell: yum install httpd -y
      tags: b

    - name: task-3
      command: yum install tree -y
      tags: c

    - name: task-4
      raw: yum install java-1.8.0-openjdk -y
      tags: d

SINGLE TAG: ansible-playbook raham.yml --tags b
MULTI TAGS: ansible-playbook raham.yml --tags b,c
SKIP TAGS: ansible-playbook raham.yml --skip-tags "c"
MULTI SKIP TAGS: SKIP TAGS: ansible-playbook raham.yml --skip-tags "c,d"

VARIABLES: These will vary and it will store the value.

DYNAMIC VARS: The vars which can be passed outside of the playbook during execution.
SINGLE VARIABLE:
- hosts: all
  tasks:
    - name: task-1
      yum: name={{a}} state=present

ansible-playbook raham.yml --extra-vars "a=tree"
ansible-playbook raham.yml --extra-vars "a=docker"
ansible-playbook raham.yml --extra-vars "a=java-1.8.0-openjdk"

- hosts: all
  tasks:
    - name: task-1
      yum: name={{a}} state=present
    - name: task-2
      yum: name={{b}} state=present
ansible-playbook raham.yml --extra-vars "a=tree b=docker"

STATIC VARIABLE: These variables are declared inside the playbook.

- hosts: all
  vars:
    a: git
    b: maven
  tasks:
    - name: task-1
      yum: name={{a}} state=present
    - name: task-2
      yum: name={{b}} state=present

- hosts: all
  vars:
    a: git
    b: maven
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present

STOPPING FACTS:

- hosts: all
  gather_facts: false
  vars:
    a: git
    b: maven
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present


HISTORY:
138  vim raham.yml
  139  ansible all --list-hosts
  140  ansible -m ping all
  141  ansible -m ping dev
  142  ansible-playbook raham.yml
  143  vim raham.yml
  144  ansible-playbook raham.yml
  145  cat raham.yml
  146  ansible all -a "git -v"
  147  ansible all -a "httpd -v"
  148  ansible all -a "tree --version"
  149  ansible all -a "java -version"
  150  cat raham.yml
  151  vim raham.yml
  152  ansible-playbook raham.yml
  153  vim raham.yml
  154  ansible-playbook raham.yml
  155  ansible all -a "java -version"
  156  ansible all -a "tree --version"
  157  ansible all -a "httpd -v"
  158  ansible all -a "git -v"
  159  vim raham.yml
  160  ansible-playbook raham.yml
  161  vim raham.yml
  162  cat p
  163  cat raham.yml
  164  ansible-playbook raham.yml --tags b
  165  cat raham.yml
  166  ansible-playbook raham.yml --tags c,d
  167  vim raham.yml
  168  ansible all -a "yum remove git* httpd* java-1.8.0-openjdk* tree* -y"
  169  cat raham.yml
  170  ansible-playbook raham.yml --skip-tags "c"
  171  vim raham.yml
  172  ansible all -a "yum remove git* httpd* java-1.8.0-openjdk* tree* -y"
  173  cat raham.yml
  174  ansible-playbook raham.yml
  175  vim raham.yml
  176  ansible-playbook raham.yml
  177  vim raham.yml
  178  cat raham.yml
  179  ansible-playbook raham.yml --extra-vars "a=docker"
  180  ansible all -a "docker --version"
  181  cat raham.yml
  182  ansible-playbook raham.yml --extra-vars "a=java-1.8.0-openjdk"
  183  ansible all -a "java -version"
  184  ansible-playbook raham.yml --extra-vars "a=tree"
  185  ansible all -a "tree --version"
  186  cat raham.yml
  187  vim raham.yml
  188  ansible all -a "yum remove git* docker* httpd* java-1.8.0-openjdk* tree* -y"
  189  cat raham.yml
  190  ansible-playbook raham.yml --extra-vars "a=tree b=docker"
  191  ansible all -a "tree --version"
  192  ansible all -a "docker --version"
  193  cat raham.yml
  194  vim raham.yml
  195  ansible-playbook raham.yml
  196  cat raham.yml
  197  vim raham.yml
  198  ansible all -a "yum remove git* maven* -y"
  199  cat raham.yml
  200  vim raham.yml
  201  cat raham.yml
  202  ansible-playbook raham.yml
  203  vim raham.yml
  204  ansible-playbook raham.yml
  205  cat raham.yml
  206  ansible all -a "yum remove git* maven* -y"
  207  vim raham.yml
  208  ansible-playbook raham.yml
  209  cat raham.yml

